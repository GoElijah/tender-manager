// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Cancel bid
	// (PUT /api/bids/cancel)
	CancelBid(w http.ResponseWriter, r *http.Request)
	// Add bid feedback
	// (PUT /api/bids/feedback)
	Feedback(w http.ResponseWriter, r *http.Request)
	// Get all Bids for the current user
	// (GET /api/bids/my)
	ListMyBids(w http.ResponseWriter, r *http.Request, params ListMyBidsParams)
	// Create a new bid
	// (POST /api/bids/new)
	CreateBid(w http.ResponseWriter, r *http.Request)
	// Publish bid
	// (PUT /api/bids/publish)
	PublishBid(w http.ResponseWriter, r *http.Request)
	// Reject bid decision
	// (PUT /api/bids/reject_decision)
	RejectBid(w http.ResponseWriter, r *http.Request)
	// Submit bid decision
	// (PUT /api/bids/submit_decision)
	SubmitBid(w http.ResponseWriter, r *http.Request)
	// Patch bid
	// (PATCH /api/bids/{bidId}/edit)
	PatchBid(w http.ResponseWriter, r *http.Request, bidId string)
	// Rollback Bid
	// (PUT /api/bids/{bidId}/rollback/{version})
	RollbackBid(w http.ResponseWriter, r *http.Request, bidId string, version string)
	// Get Bid status
	// (GET /api/bids/{bidId}/status)
	GetBidStatus(w http.ResponseWriter, r *http.Request, bidId string)
	// Get bid version
	// (GET /api/bids/{bidId}/version)
	GetBidVersion(w http.ResponseWriter, r *http.Request, bidId string)
	// Get all Bids for tender
	// (POST /api/bids/{tenderId}/list)
	ListBids(w http.ResponseWriter, r *http.Request, tenderId string)
	// List feedback from bids user
	// (GET /api/bids/{tenderId}/reviews)
	ListFeedback(w http.ResponseWriter, r *http.Request, tenderId string, params ListFeedbackParams)

	// (GET /api/ping)
	Ping(w http.ResponseWriter, r *http.Request)
	// Get all tenders
	// (POST /api/tenders)
	ListTenders(w http.ResponseWriter, r *http.Request, params ListTendersParams)
	// Close tender
	// (PUT /api/tenders/close)
	CloseTender(w http.ResponseWriter, r *http.Request)
	// Get all tenders for the current user
	// (GET /api/tenders/my)
	ListMyTenders(w http.ResponseWriter, r *http.Request, params ListMyTendersParams)
	// Create a new tender
	// (POST /api/tenders/new)
	CreateTender(w http.ResponseWriter, r *http.Request)
	// Publish created tender
	// (PUT /api/tenders/publish)
	PublishTender(w http.ResponseWriter, r *http.Request)
	// Patch tender
	// (PATCH /api/tenders/{tenderId}/edit)
	PatchTender(w http.ResponseWriter, r *http.Request, tenderId string)
	// Rollback Tender
	// (PUT /api/tenders/{tenderId}/rollback/{version})
	RollbackTender(w http.ResponseWriter, r *http.Request, tenderId string, version string)
	// Get tender status
	// (GET /api/tenders/{tenderId}/status)
	GetTenderStatus(w http.ResponseWriter, r *http.Request, tenderId string)
	// Get tender version
	// (GET /api/tenders/{tenderId}/version)
	GetTenderVersion(w http.ResponseWriter, r *http.Request, tenderId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Cancel bid
// (PUT /api/bids/cancel)
func (_ Unimplemented) CancelBid(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add bid feedback
// (PUT /api/bids/feedback)
func (_ Unimplemented) Feedback(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all Bids for the current user
// (GET /api/bids/my)
func (_ Unimplemented) ListMyBids(w http.ResponseWriter, r *http.Request, params ListMyBidsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new bid
// (POST /api/bids/new)
func (_ Unimplemented) CreateBid(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish bid
// (PUT /api/bids/publish)
func (_ Unimplemented) PublishBid(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reject bid decision
// (PUT /api/bids/reject_decision)
func (_ Unimplemented) RejectBid(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Submit bid decision
// (PUT /api/bids/submit_decision)
func (_ Unimplemented) SubmitBid(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Patch bid
// (PATCH /api/bids/{bidId}/edit)
func (_ Unimplemented) PatchBid(w http.ResponseWriter, r *http.Request, bidId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Rollback Bid
// (PUT /api/bids/{bidId}/rollback/{version})
func (_ Unimplemented) RollbackBid(w http.ResponseWriter, r *http.Request, bidId string, version string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Bid status
// (GET /api/bids/{bidId}/status)
func (_ Unimplemented) GetBidStatus(w http.ResponseWriter, r *http.Request, bidId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get bid version
// (GET /api/bids/{bidId}/version)
func (_ Unimplemented) GetBidVersion(w http.ResponseWriter, r *http.Request, bidId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all Bids for tender
// (POST /api/bids/{tenderId}/list)
func (_ Unimplemented) ListBids(w http.ResponseWriter, r *http.Request, tenderId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List feedback from bids user
// (GET /api/bids/{tenderId}/reviews)
func (_ Unimplemented) ListFeedback(w http.ResponseWriter, r *http.Request, tenderId string, params ListFeedbackParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/ping)
func (_ Unimplemented) Ping(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all tenders
// (POST /api/tenders)
func (_ Unimplemented) ListTenders(w http.ResponseWriter, r *http.Request, params ListTendersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Close tender
// (PUT /api/tenders/close)
func (_ Unimplemented) CloseTender(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all tenders for the current user
// (GET /api/tenders/my)
func (_ Unimplemented) ListMyTenders(w http.ResponseWriter, r *http.Request, params ListMyTendersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new tender
// (POST /api/tenders/new)
func (_ Unimplemented) CreateTender(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish created tender
// (PUT /api/tenders/publish)
func (_ Unimplemented) PublishTender(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Patch tender
// (PATCH /api/tenders/{tenderId}/edit)
func (_ Unimplemented) PatchTender(w http.ResponseWriter, r *http.Request, tenderId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Rollback Tender
// (PUT /api/tenders/{tenderId}/rollback/{version})
func (_ Unimplemented) RollbackTender(w http.ResponseWriter, r *http.Request, tenderId string, version string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tender status
// (GET /api/tenders/{tenderId}/status)
func (_ Unimplemented) GetTenderStatus(w http.ResponseWriter, r *http.Request, tenderId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tender version
// (GET /api/tenders/{tenderId}/version)
func (_ Unimplemented) GetTenderVersion(w http.ResponseWriter, r *http.Request, tenderId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CancelBid operation middleware
func (siw *ServerInterfaceWrapper) CancelBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelBid(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Feedback operation middleware
func (siw *ServerInterfaceWrapper) Feedback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Feedback(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMyBids operation middleware
func (siw *ServerInterfaceWrapper) ListMyBids(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMyBidsParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMyBids(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBid operation middleware
func (siw *ServerInterfaceWrapper) CreateBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBid(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublishBid operation middleware
func (siw *ServerInterfaceWrapper) PublishBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishBid(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RejectBid operation middleware
func (siw *ServerInterfaceWrapper) RejectBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RejectBid(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SubmitBid operation middleware
func (siw *ServerInterfaceWrapper) SubmitBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubmitBid(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchBid operation middleware
func (siw *ServerInterfaceWrapper) PatchBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId string

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", chi.URLParam(r, "bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bidId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchBid(w, r, bidId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RollbackBid operation middleware
func (siw *ServerInterfaceWrapper) RollbackBid(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId string

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", chi.URLParam(r, "bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bidId", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", chi.URLParam(r, "version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RollbackBid(w, r, bidId, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBidStatus operation middleware
func (siw *ServerInterfaceWrapper) GetBidStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId string

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", chi.URLParam(r, "bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bidId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBidStatus(w, r, bidId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBidVersion operation middleware
func (siw *ServerInterfaceWrapper) GetBidVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bidId" -------------
	var bidId string

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", chi.URLParam(r, "bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bidId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBidVersion(w, r, bidId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBids operation middleware
func (siw *ServerInterfaceWrapper) ListBids(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId string

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", chi.URLParam(r, "tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBids(w, r, tenderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeedback operation middleware
func (siw *ServerInterfaceWrapper) ListFeedback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId string

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", chi.URLParam(r, "tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenderId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFeedbackParams

	// ------------- Optional query parameter "authorUsername" -------------

	err = runtime.BindQueryParameter("form", true, false, "authorUsername", r.URL.Query(), &params.AuthorUsername)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "authorUsername", Err: err})
		return
	}

	// ------------- Optional query parameter "organizationId" -------------

	err = runtime.BindQueryParameter("form", true, false, "organizationId", r.URL.Query(), &params.OrganizationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeedback(w, r, tenderId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTenders operation middleware
func (siw *ServerInterfaceWrapper) ListTenders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTendersParams

	// ------------- Optional query parameter "serviceType" -------------

	err = runtime.BindQueryParameter("form", true, false, "serviceType", r.URL.Query(), &params.ServiceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceType", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTenders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CloseTender operation middleware
func (siw *ServerInterfaceWrapper) CloseTender(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CloseTender(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMyTenders operation middleware
func (siw *ServerInterfaceWrapper) ListMyTenders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMyTendersParams

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMyTenders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTender operation middleware
func (siw *ServerInterfaceWrapper) CreateTender(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTender(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublishTender operation middleware
func (siw *ServerInterfaceWrapper) PublishTender(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublishTender(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchTender operation middleware
func (siw *ServerInterfaceWrapper) PatchTender(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId string

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", chi.URLParam(r, "tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchTender(w, r, tenderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RollbackTender operation middleware
func (siw *ServerInterfaceWrapper) RollbackTender(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId string

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", chi.URLParam(r, "tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenderId", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", chi.URLParam(r, "version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RollbackTender(w, r, tenderId, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTenderStatus operation middleware
func (siw *ServerInterfaceWrapper) GetTenderStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId string

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", chi.URLParam(r, "tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenderStatus(w, r, tenderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTenderVersion operation middleware
func (siw *ServerInterfaceWrapper) GetTenderVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tenderId" -------------
	var tenderId string

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", chi.URLParam(r, "tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tenderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTenderVersion(w, r, tenderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/bids/cancel", wrapper.CancelBid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/bids/feedback", wrapper.Feedback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/bids/my", wrapper.ListMyBids)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/bids/new", wrapper.CreateBid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/bids/publish", wrapper.PublishBid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/bids/reject_decision", wrapper.RejectBid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/bids/submit_decision", wrapper.SubmitBid)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/bids/{bidId}/edit", wrapper.PatchBid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/bids/{bidId}/rollback/{version}", wrapper.RollbackBid)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/bids/{bidId}/status", wrapper.GetBidStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/bids/{bidId}/version", wrapper.GetBidVersion)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/bids/{tenderId}/list", wrapper.ListBids)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/bids/{tenderId}/reviews", wrapper.ListFeedback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/ping", wrapper.Ping)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tenders", wrapper.ListTenders)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tenders/close", wrapper.CloseTender)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tenders/my", wrapper.ListMyTenders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/tenders/new", wrapper.CreateTender)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tenders/publish", wrapper.PublishTender)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/tenders/{tenderId}/edit", wrapper.PatchTender)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/tenders/{tenderId}/rollback/{version}", wrapper.RollbackTender)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tenders/{tenderId}/status", wrapper.GetTenderStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/tenders/{tenderId}/version", wrapper.GetTenderVersion)
	})

	return r
}

type CancelBidRequestObject struct {
	Body *CancelBidJSONRequestBody
}

type CancelBidResponseObject interface {
	VisitCancelBidResponse(w http.ResponseWriter) error
}

type CancelBid200JSONResponse CancelBidResponse

func (response CancelBid200JSONResponse) VisitCancelBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CancelBid400JSONResponse ErrorResponse

func (response CancelBid400JSONResponse) VisitCancelBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CancelBid403JSONResponse ErrorResponse

func (response CancelBid403JSONResponse) VisitCancelBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CancelBid404JSONResponse ErrorResponse

func (response CancelBid404JSONResponse) VisitCancelBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CancelBid500JSONResponse ErrorResponse

func (response CancelBid500JSONResponse) VisitCancelBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FeedbackRequestObject struct {
	Body *FeedbackJSONRequestBody
}

type FeedbackResponseObject interface {
	VisitFeedbackResponse(w http.ResponseWriter) error
}

type Feedback200JSONResponse FeedbackResponse

func (response Feedback200JSONResponse) VisitFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Feedback400JSONResponse ErrorResponse

func (response Feedback400JSONResponse) VisitFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Feedback403JSONResponse ErrorResponse

func (response Feedback403JSONResponse) VisitFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Feedback404JSONResponse ErrorResponse

func (response Feedback404JSONResponse) VisitFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Feedback500JSONResponse ErrorResponse

func (response Feedback500JSONResponse) VisitFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListMyBidsRequestObject struct {
	Params ListMyBidsParams
}

type ListMyBidsResponseObject interface {
	VisitListMyBidsResponse(w http.ResponseWriter) error
}

type ListMyBids200JSONResponse []ListBidsResponse

func (response ListMyBids200JSONResponse) VisitListMyBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMyBids400JSONResponse ErrorResponse

func (response ListMyBids400JSONResponse) VisitListMyBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListMyBids500JSONResponse ErrorResponse

func (response ListMyBids500JSONResponse) VisitListMyBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateBidRequestObject struct {
	Body *CreateBidJSONRequestBody
}

type CreateBidResponseObject interface {
	VisitCreateBidResponse(w http.ResponseWriter) error
}

type CreateBid201JSONResponse CreateBidResponse

func (response CreateBid201JSONResponse) VisitCreateBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateBid400JSONResponse ErrorResponse

func (response CreateBid400JSONResponse) VisitCreateBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateBid500JSONResponse ErrorResponse

func (response CreateBid500JSONResponse) VisitCreateBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishBidRequestObject struct {
	Body *PublishBidJSONRequestBody
}

type PublishBidResponseObject interface {
	VisitPublishBidResponse(w http.ResponseWriter) error
}

type PublishBid200JSONResponse PublishBidResponse

func (response PublishBid200JSONResponse) VisitPublishBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishBid400JSONResponse ErrorResponse

func (response PublishBid400JSONResponse) VisitPublishBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishBid403JSONResponse ErrorResponse

func (response PublishBid403JSONResponse) VisitPublishBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PublishBid404JSONResponse ErrorResponse

func (response PublishBid404JSONResponse) VisitPublishBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PublishBid500JSONResponse ErrorResponse

func (response PublishBid500JSONResponse) VisitPublishBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RejectBidRequestObject struct {
	Body *RejectBidJSONRequestBody
}

type RejectBidResponseObject interface {
	VisitRejectBidResponse(w http.ResponseWriter) error
}

type RejectBid200JSONResponse DecisionBidResponse

func (response RejectBid200JSONResponse) VisitRejectBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RejectBid400JSONResponse ErrorResponse

func (response RejectBid400JSONResponse) VisitRejectBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RejectBid500JSONResponse ErrorResponse

func (response RejectBid500JSONResponse) VisitRejectBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SubmitBidRequestObject struct {
	Body *SubmitBidJSONRequestBody
}

type SubmitBidResponseObject interface {
	VisitSubmitBidResponse(w http.ResponseWriter) error
}

type SubmitBid200JSONResponse DecisionBidResponse

func (response SubmitBid200JSONResponse) VisitSubmitBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubmitBid400JSONResponse ErrorResponse

func (response SubmitBid400JSONResponse) VisitSubmitBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SubmitBid500JSONResponse ErrorResponse

func (response SubmitBid500JSONResponse) VisitSubmitBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchBidRequestObject struct {
	BidId string `json:"bidId"`
	Body  *PatchBidJSONRequestBody
}

type PatchBidResponseObject interface {
	VisitPatchBidResponse(w http.ResponseWriter) error
}

type PatchBid200JSONResponse PatchBidResponse

func (response PatchBid200JSONResponse) VisitPatchBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchBid400JSONResponse ErrorResponse

func (response PatchBid400JSONResponse) VisitPatchBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchBid403JSONResponse ErrorResponse

func (response PatchBid403JSONResponse) VisitPatchBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchBid404JSONResponse ErrorResponse

func (response PatchBid404JSONResponse) VisitPatchBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchBid500JSONResponse ErrorResponse

func (response PatchBid500JSONResponse) VisitPatchBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RollbackBidRequestObject struct {
	BidId   string `json:"bidId"`
	Version string `json:"version"`
	Body    *RollbackBidJSONRequestBody
}

type RollbackBidResponseObject interface {
	VisitRollbackBidResponse(w http.ResponseWriter) error
}

type RollbackBid200JSONResponse RollbackBidResponse

func (response RollbackBid200JSONResponse) VisitRollbackBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RollbackBid400JSONResponse ErrorResponse

func (response RollbackBid400JSONResponse) VisitRollbackBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RollbackBid403JSONResponse ErrorResponse

func (response RollbackBid403JSONResponse) VisitRollbackBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RollbackBid404JSONResponse ErrorResponse

func (response RollbackBid404JSONResponse) VisitRollbackBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RollbackBid500JSONResponse ErrorResponse

func (response RollbackBid500JSONResponse) VisitRollbackBidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBidStatusRequestObject struct {
	BidId string `json:"bidId"`
}

type GetBidStatusResponseObject interface {
	VisitGetBidStatusResponse(w http.ResponseWriter) error
}

type GetBidStatus200JSONResponse GetBidStatusResponse

func (response GetBidStatus200JSONResponse) VisitGetBidStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBidStatus400JSONResponse ErrorResponse

func (response GetBidStatus400JSONResponse) VisitGetBidStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetBidStatus500JSONResponse ErrorResponse

func (response GetBidStatus500JSONResponse) VisitGetBidStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBidVersionRequestObject struct {
	BidId string `json:"bidId"`
}

type GetBidVersionResponseObject interface {
	VisitGetBidVersionResponse(w http.ResponseWriter) error
}

type GetBidVersion200JSONResponse GetBidVersionResponse

func (response GetBidVersion200JSONResponse) VisitGetBidVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBidVersion400JSONResponse ErrorResponse

func (response GetBidVersion400JSONResponse) VisitGetBidVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetBidVersion500JSONResponse ErrorResponse

func (response GetBidVersion500JSONResponse) VisitGetBidVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListBidsRequestObject struct {
	TenderId string `json:"tenderId"`
	Body     *ListBidsJSONRequestBody
}

type ListBidsResponseObject interface {
	VisitListBidsResponse(w http.ResponseWriter) error
}

type ListBids200JSONResponse []ListBidsResponse

func (response ListBids200JSONResponse) VisitListBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListBids400JSONResponse ErrorResponse

func (response ListBids400JSONResponse) VisitListBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListBids500JSONResponse ErrorResponse

func (response ListBids500JSONResponse) VisitListBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListFeedbackRequestObject struct {
	TenderId string `json:"tenderId"`
	Params   ListFeedbackParams
}

type ListFeedbackResponseObject interface {
	VisitListFeedbackResponse(w http.ResponseWriter) error
}

type ListFeedback200JSONResponse []ListFeedback

func (response ListFeedback200JSONResponse) VisitListFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFeedback400JSONResponse ErrorResponse

func (response ListFeedback400JSONResponse) VisitListFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListFeedback403JSONResponse ErrorResponse

func (response ListFeedback403JSONResponse) VisitListFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListFeedback404JSONResponse ErrorResponse

func (response ListFeedback404JSONResponse) VisitListFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListFeedback500JSONResponse ErrorResponse

func (response ListFeedback500JSONResponse) VisitListFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200JSONResponse Pong

func (response Ping200JSONResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTendersRequestObject struct {
	Params ListTendersParams
	Body   *ListTendersJSONRequestBody
}

type ListTendersResponseObject interface {
	VisitListTendersResponse(w http.ResponseWriter) error
}

type ListTenders200JSONResponse []ListTendersResponse

func (response ListTenders200JSONResponse) VisitListTendersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTenders400JSONResponse ErrorResponse

func (response ListTenders400JSONResponse) VisitListTendersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTenders500JSONResponse ErrorResponse

func (response ListTenders500JSONResponse) VisitListTendersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CloseTenderRequestObject struct {
	Body *CloseTenderJSONRequestBody
}

type CloseTenderResponseObject interface {
	VisitCloseTenderResponse(w http.ResponseWriter) error
}

type CloseTender200JSONResponse CloseTenderResponse

func (response CloseTender200JSONResponse) VisitCloseTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CloseTender400JSONResponse ErrorResponse

func (response CloseTender400JSONResponse) VisitCloseTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CloseTender403JSONResponse ErrorResponse

func (response CloseTender403JSONResponse) VisitCloseTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CloseTender404JSONResponse ErrorResponse

func (response CloseTender404JSONResponse) VisitCloseTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CloseTender500JSONResponse ErrorResponse

func (response CloseTender500JSONResponse) VisitCloseTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListMyTendersRequestObject struct {
	Params ListMyTendersParams
}

type ListMyTendersResponseObject interface {
	VisitListMyTendersResponse(w http.ResponseWriter) error
}

type ListMyTenders200JSONResponse []ListTendersResponse

func (response ListMyTenders200JSONResponse) VisitListMyTendersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMyTenders400JSONResponse ErrorResponse

func (response ListMyTenders400JSONResponse) VisitListMyTendersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListMyTenders500JSONResponse ErrorResponse

func (response ListMyTenders500JSONResponse) VisitListMyTendersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateTenderRequestObject struct {
	Body *CreateTenderJSONRequestBody
}

type CreateTenderResponseObject interface {
	VisitCreateTenderResponse(w http.ResponseWriter) error
}

type CreateTender201JSONResponse CreateTenderResponse

func (response CreateTender201JSONResponse) VisitCreateTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTender400JSONResponse ErrorResponse

func (response CreateTender400JSONResponse) VisitCreateTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTender500JSONResponse ErrorResponse

func (response CreateTender500JSONResponse) VisitCreateTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PublishTenderRequestObject struct {
	Body *PublishTenderJSONRequestBody
}

type PublishTenderResponseObject interface {
	VisitPublishTenderResponse(w http.ResponseWriter) error
}

type PublishTender200JSONResponse PublishTenderResponse

func (response PublishTender200JSONResponse) VisitPublishTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PublishTender400JSONResponse ErrorResponse

func (response PublishTender400JSONResponse) VisitPublishTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PublishTender403JSONResponse ErrorResponse

func (response PublishTender403JSONResponse) VisitPublishTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PublishTender404JSONResponse ErrorResponse

func (response PublishTender404JSONResponse) VisitPublishTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PublishTender500JSONResponse ErrorResponse

func (response PublishTender500JSONResponse) VisitPublishTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTenderRequestObject struct {
	TenderId string `json:"tenderId"`
	Body     *PatchTenderJSONRequestBody
}

type PatchTenderResponseObject interface {
	VisitPatchTenderResponse(w http.ResponseWriter) error
}

type PatchTender200JSONResponse PatchTenderResponse

func (response PatchTender200JSONResponse) VisitPatchTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTender400JSONResponse ErrorResponse

func (response PatchTender400JSONResponse) VisitPatchTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchTender403JSONResponse ErrorResponse

func (response PatchTender403JSONResponse) VisitPatchTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTender404JSONResponse ErrorResponse

func (response PatchTender404JSONResponse) VisitPatchTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTender500JSONResponse ErrorResponse

func (response PatchTender500JSONResponse) VisitPatchTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RollbackTenderRequestObject struct {
	TenderId string `json:"tenderId"`
	Version  string `json:"version"`
	Body     *RollbackTenderJSONRequestBody
}

type RollbackTenderResponseObject interface {
	VisitRollbackTenderResponse(w http.ResponseWriter) error
}

type RollbackTender200JSONResponse RollbackTenderResponse

func (response RollbackTender200JSONResponse) VisitRollbackTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RollbackTender400JSONResponse ErrorResponse

func (response RollbackTender400JSONResponse) VisitRollbackTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RollbackTender403JSONResponse ErrorResponse

func (response RollbackTender403JSONResponse) VisitRollbackTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RollbackTender404JSONResponse ErrorResponse

func (response RollbackTender404JSONResponse) VisitRollbackTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RollbackTender500JSONResponse ErrorResponse

func (response RollbackTender500JSONResponse) VisitRollbackTenderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTenderStatusRequestObject struct {
	TenderId string `json:"tenderId"`
}

type GetTenderStatusResponseObject interface {
	VisitGetTenderStatusResponse(w http.ResponseWriter) error
}

type GetTenderStatus200JSONResponse GetTenderStatusResponse

func (response GetTenderStatus200JSONResponse) VisitGetTenderStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenderStatus400JSONResponse ErrorResponse

func (response GetTenderStatus400JSONResponse) VisitGetTenderStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTenderStatus500JSONResponse ErrorResponse

func (response GetTenderStatus500JSONResponse) VisitGetTenderStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTenderVersionRequestObject struct {
	TenderId string `json:"tenderId"`
}

type GetTenderVersionResponseObject interface {
	VisitGetTenderVersionResponse(w http.ResponseWriter) error
}

type GetTenderVersion200JSONResponse GetTenderVersionResponse

func (response GetTenderVersion200JSONResponse) VisitGetTenderVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTenderVersion400JSONResponse ErrorResponse

func (response GetTenderVersion400JSONResponse) VisitGetTenderVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTenderVersion500JSONResponse ErrorResponse

func (response GetTenderVersion500JSONResponse) VisitGetTenderVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Cancel bid
	// (PUT /api/bids/cancel)
	CancelBid(ctx context.Context, request CancelBidRequestObject) (CancelBidResponseObject, error)
	// Add bid feedback
	// (PUT /api/bids/feedback)
	Feedback(ctx context.Context, request FeedbackRequestObject) (FeedbackResponseObject, error)
	// Get all Bids for the current user
	// (GET /api/bids/my)
	ListMyBids(ctx context.Context, request ListMyBidsRequestObject) (ListMyBidsResponseObject, error)
	// Create a new bid
	// (POST /api/bids/new)
	CreateBid(ctx context.Context, request CreateBidRequestObject) (CreateBidResponseObject, error)
	// Publish bid
	// (PUT /api/bids/publish)
	PublishBid(ctx context.Context, request PublishBidRequestObject) (PublishBidResponseObject, error)
	// Reject bid decision
	// (PUT /api/bids/reject_decision)
	RejectBid(ctx context.Context, request RejectBidRequestObject) (RejectBidResponseObject, error)
	// Submit bid decision
	// (PUT /api/bids/submit_decision)
	SubmitBid(ctx context.Context, request SubmitBidRequestObject) (SubmitBidResponseObject, error)
	// Patch bid
	// (PATCH /api/bids/{bidId}/edit)
	PatchBid(ctx context.Context, request PatchBidRequestObject) (PatchBidResponseObject, error)
	// Rollback Bid
	// (PUT /api/bids/{bidId}/rollback/{version})
	RollbackBid(ctx context.Context, request RollbackBidRequestObject) (RollbackBidResponseObject, error)
	// Get Bid status
	// (GET /api/bids/{bidId}/status)
	GetBidStatus(ctx context.Context, request GetBidStatusRequestObject) (GetBidStatusResponseObject, error)
	// Get bid version
	// (GET /api/bids/{bidId}/version)
	GetBidVersion(ctx context.Context, request GetBidVersionRequestObject) (GetBidVersionResponseObject, error)
	// Get all Bids for tender
	// (POST /api/bids/{tenderId}/list)
	ListBids(ctx context.Context, request ListBidsRequestObject) (ListBidsResponseObject, error)
	// List feedback from bids user
	// (GET /api/bids/{tenderId}/reviews)
	ListFeedback(ctx context.Context, request ListFeedbackRequestObject) (ListFeedbackResponseObject, error)

	// (GET /api/ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// Get all tenders
	// (POST /api/tenders)
	ListTenders(ctx context.Context, request ListTendersRequestObject) (ListTendersResponseObject, error)
	// Close tender
	// (PUT /api/tenders/close)
	CloseTender(ctx context.Context, request CloseTenderRequestObject) (CloseTenderResponseObject, error)
	// Get all tenders for the current user
	// (GET /api/tenders/my)
	ListMyTenders(ctx context.Context, request ListMyTendersRequestObject) (ListMyTendersResponseObject, error)
	// Create a new tender
	// (POST /api/tenders/new)
	CreateTender(ctx context.Context, request CreateTenderRequestObject) (CreateTenderResponseObject, error)
	// Publish created tender
	// (PUT /api/tenders/publish)
	PublishTender(ctx context.Context, request PublishTenderRequestObject) (PublishTenderResponseObject, error)
	// Patch tender
	// (PATCH /api/tenders/{tenderId}/edit)
	PatchTender(ctx context.Context, request PatchTenderRequestObject) (PatchTenderResponseObject, error)
	// Rollback Tender
	// (PUT /api/tenders/{tenderId}/rollback/{version})
	RollbackTender(ctx context.Context, request RollbackTenderRequestObject) (RollbackTenderResponseObject, error)
	// Get tender status
	// (GET /api/tenders/{tenderId}/status)
	GetTenderStatus(ctx context.Context, request GetTenderStatusRequestObject) (GetTenderStatusResponseObject, error)
	// Get tender version
	// (GET /api/tenders/{tenderId}/version)
	GetTenderVersion(ctx context.Context, request GetTenderVersionRequestObject) (GetTenderVersionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CancelBid operation middleware
func (sh *strictHandler) CancelBid(w http.ResponseWriter, r *http.Request) {
	var request CancelBidRequestObject

	var body CancelBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CancelBid(ctx, request.(CancelBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CancelBidResponseObject); ok {
		if err := validResponse.VisitCancelBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Feedback operation middleware
func (sh *strictHandler) Feedback(w http.ResponseWriter, r *http.Request) {
	var request FeedbackRequestObject

	var body FeedbackJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Feedback(ctx, request.(FeedbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Feedback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FeedbackResponseObject); ok {
		if err := validResponse.VisitFeedbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMyBids operation middleware
func (sh *strictHandler) ListMyBids(w http.ResponseWriter, r *http.Request, params ListMyBidsParams) {
	var request ListMyBidsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMyBids(ctx, request.(ListMyBidsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMyBids")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListMyBidsResponseObject); ok {
		if err := validResponse.VisitListMyBidsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateBid operation middleware
func (sh *strictHandler) CreateBid(w http.ResponseWriter, r *http.Request) {
	var request CreateBidRequestObject

	var body CreateBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBid(ctx, request.(CreateBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateBidResponseObject); ok {
		if err := validResponse.VisitCreateBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishBid operation middleware
func (sh *strictHandler) PublishBid(w http.ResponseWriter, r *http.Request) {
	var request PublishBidRequestObject

	var body PublishBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishBid(ctx, request.(PublishBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishBidResponseObject); ok {
		if err := validResponse.VisitPublishBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RejectBid operation middleware
func (sh *strictHandler) RejectBid(w http.ResponseWriter, r *http.Request) {
	var request RejectBidRequestObject

	var body RejectBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RejectBid(ctx, request.(RejectBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RejectBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RejectBidResponseObject); ok {
		if err := validResponse.VisitRejectBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubmitBid operation middleware
func (sh *strictHandler) SubmitBid(w http.ResponseWriter, r *http.Request) {
	var request SubmitBidRequestObject

	var body SubmitBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SubmitBid(ctx, request.(SubmitBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubmitBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SubmitBidResponseObject); ok {
		if err := validResponse.VisitSubmitBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchBid operation middleware
func (sh *strictHandler) PatchBid(w http.ResponseWriter, r *http.Request, bidId string) {
	var request PatchBidRequestObject

	request.BidId = bidId

	var body PatchBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchBid(ctx, request.(PatchBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchBidResponseObject); ok {
		if err := validResponse.VisitPatchBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RollbackBid operation middleware
func (sh *strictHandler) RollbackBid(w http.ResponseWriter, r *http.Request, bidId string, version string) {
	var request RollbackBidRequestObject

	request.BidId = bidId
	request.Version = version

	var body RollbackBidJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RollbackBid(ctx, request.(RollbackBidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RollbackBid")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RollbackBidResponseObject); ok {
		if err := validResponse.VisitRollbackBidResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBidStatus operation middleware
func (sh *strictHandler) GetBidStatus(w http.ResponseWriter, r *http.Request, bidId string) {
	var request GetBidStatusRequestObject

	request.BidId = bidId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBidStatus(ctx, request.(GetBidStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBidStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBidStatusResponseObject); ok {
		if err := validResponse.VisitGetBidStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBidVersion operation middleware
func (sh *strictHandler) GetBidVersion(w http.ResponseWriter, r *http.Request, bidId string) {
	var request GetBidVersionRequestObject

	request.BidId = bidId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBidVersion(ctx, request.(GetBidVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBidVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBidVersionResponseObject); ok {
		if err := validResponse.VisitGetBidVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListBids operation middleware
func (sh *strictHandler) ListBids(w http.ResponseWriter, r *http.Request, tenderId string) {
	var request ListBidsRequestObject

	request.TenderId = tenderId

	var body ListBidsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListBids(ctx, request.(ListBidsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListBids")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListBidsResponseObject); ok {
		if err := validResponse.VisitListBidsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFeedback operation middleware
func (sh *strictHandler) ListFeedback(w http.ResponseWriter, r *http.Request, tenderId string, params ListFeedbackParams) {
	var request ListFeedbackRequestObject

	request.TenderId = tenderId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFeedback(ctx, request.(ListFeedbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFeedback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFeedbackResponseObject); ok {
		if err := validResponse.VisitListFeedbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandler) Ping(w http.ResponseWriter, r *http.Request) {
	var request PingRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTenders operation middleware
func (sh *strictHandler) ListTenders(w http.ResponseWriter, r *http.Request, params ListTendersParams) {
	var request ListTendersRequestObject

	request.Params = params

	var body ListTendersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTenders(ctx, request.(ListTendersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTenders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTendersResponseObject); ok {
		if err := validResponse.VisitListTendersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CloseTender operation middleware
func (sh *strictHandler) CloseTender(w http.ResponseWriter, r *http.Request) {
	var request CloseTenderRequestObject

	var body CloseTenderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CloseTender(ctx, request.(CloseTenderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CloseTender")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CloseTenderResponseObject); ok {
		if err := validResponse.VisitCloseTenderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMyTenders operation middleware
func (sh *strictHandler) ListMyTenders(w http.ResponseWriter, r *http.Request, params ListMyTendersParams) {
	var request ListMyTendersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMyTenders(ctx, request.(ListMyTendersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMyTenders")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListMyTendersResponseObject); ok {
		if err := validResponse.VisitListMyTendersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTender operation middleware
func (sh *strictHandler) CreateTender(w http.ResponseWriter, r *http.Request) {
	var request CreateTenderRequestObject

	var body CreateTenderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTender(ctx, request.(CreateTenderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTender")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTenderResponseObject); ok {
		if err := validResponse.VisitCreateTenderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PublishTender operation middleware
func (sh *strictHandler) PublishTender(w http.ResponseWriter, r *http.Request) {
	var request PublishTenderRequestObject

	var body PublishTenderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PublishTender(ctx, request.(PublishTenderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PublishTender")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PublishTenderResponseObject); ok {
		if err := validResponse.VisitPublishTenderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchTender operation middleware
func (sh *strictHandler) PatchTender(w http.ResponseWriter, r *http.Request, tenderId string) {
	var request PatchTenderRequestObject

	request.TenderId = tenderId

	var body PatchTenderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTender(ctx, request.(PatchTenderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTender")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchTenderResponseObject); ok {
		if err := validResponse.VisitPatchTenderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RollbackTender operation middleware
func (sh *strictHandler) RollbackTender(w http.ResponseWriter, r *http.Request, tenderId string, version string) {
	var request RollbackTenderRequestObject

	request.TenderId = tenderId
	request.Version = version

	var body RollbackTenderJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RollbackTender(ctx, request.(RollbackTenderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RollbackTender")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RollbackTenderResponseObject); ok {
		if err := validResponse.VisitRollbackTenderResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTenderStatus operation middleware
func (sh *strictHandler) GetTenderStatus(w http.ResponseWriter, r *http.Request, tenderId string) {
	var request GetTenderStatusRequestObject

	request.TenderId = tenderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenderStatus(ctx, request.(GetTenderStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenderStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTenderStatusResponseObject); ok {
		if err := validResponse.VisitGetTenderStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTenderVersion operation middleware
func (sh *strictHandler) GetTenderVersion(w http.ResponseWriter, r *http.Request, tenderId string) {
	var request GetTenderVersionRequestObject

	request.TenderId = tenderId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTenderVersion(ctx, request.(GetTenderVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTenderVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTenderVersionResponseObject); ok {
		if err := validResponse.VisitGetTenderVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcTW/bOBP+K4Le92jE6bZ78a3ZbooA3UXQZntZBAUtjWO2sqSSVFJv4P++IKlvkSKl",
	"WJa74CmxJJLD4TwzD4cjPftBskuTGGJG/dWzT4Mt7JD49wqH/E9KkhQIwyAuhkADglOGk5j/ZPsU/JVP",
	"GcHxg39Y+LJN53KMdqC8wSAOgdyoWvG78kqy/goB44//huIAoiscfoTvGVDWFXCNwxu1DIFo+xcFopHm",
	"sPAJfM8wgdBf/d1+fpF3fd8vFk2TmEJXLq0GKEMso2ZxciHyx5VSRAmFO6FQrXoC/gzpUYJpSeoilU8u",
	"2v0axdOpSauNkXL1qYsAYmCwpS8JeUAx/gdpLT7g3ST9KjWhZsxaFDdNEqrNqC7Roq4wVaeLria68zao",
	"WLfgx3UorcliPiPFjPWymuAz5WLXFaxZcgrkEQdwJ66PWup6D50hh6yqCclT2Lwe55aL/A4CTHESH9lV",
	"L/zHhEH9Do4ZPAAxePGinUrU3wlJetQL/HZHz/676peXbDy2BU8+uTDoUj6lEuQaIFyj4NuIkLvJmypv",
	"ptk6wnTbG41aQnabFFG5Nlb/HHT6HDWJlnjlk31c4T2wKxx+EgagF0fj9mzJQmlfuE+Iz0A4GAZL8Sjb",
	"mcUoHuyTQ/qR+fUh5ZhfJR8w5WtDtXDLrOGS9XnxapxqqpjBTozxfwIbf+X/b1ntDpb51mDJ9wUVN0eE",
	"oL2/8H/sosp35p6ZK/yJoDTl4jCSwSEf97oGKasxS2S9cGC5yCfRbTnUQPXKdi+Z6C1iwbaP15pCM4TY",
	"RHLslNTqyDpMVzMY7q5H8o6W5EVUGSKwgTvOpXWjvD8Vg7tN4oeuqCmWV+EH2qWRaPHNSHlEI+UYkmaM",
	"SzMcldaYpJsoXGLD1jkXwWDwNpoYaSzdri3EPIOcw0fg/zV2IYMNbESM6jOnj0kU8dDaJ8yRwmJjqNMk",
	"BAYwM12yoOqib04GLBxZgy913WemxE/ZeofPCxY5DZtcs8aMTkey+n7UVjkEHjE8WQ3AL+F4k3RzC29v",
	"b7xNQrycenooDr01DjkHZZiJqCu15r29vamt+Mp/dXF5cSlSXCnEKMX+yn99cXnxintyxLZC+CVK8ZJ3",
	"t5SJdxlBhAnwOZZZsSrZ7stlBcquknAv0nNJzCAWbVCaRjgQrZZfqVwsSbFNBLxzxnBoGpCg2fyCBJ8Q",
	"/pfLyynGz+EtBGiuxRUOPZoFAVC6yaJo70mlgdiavTmiNM00lEoSFHqlpvjYr0839nVC1jgMIZYjvznd",
	"yH8mzLtOsljo+9dT6vsmZtx9Rd4nII9APNFAAJlmux0i+xIiHJwcm+iBcrfHN/v+PX+wglrDl6jAdl2l",
	"tKbAWju3eGKoddKCaqRRr9BTE3MFC3Wgc6Bb+W9DEQ69Wha4D3o7gaIHUIDuA6bsj/2VDK0pImgHDAjv",
	"6dnHXJzvGZB9QbRWdUJTzbcd6O9fiCOr5FUnqdhOY+kA1sAVAUYwPEIo6EaQEQIx8/gs5wba2Rnde2Ae",
	"iiJPeilOzrbQ1Fi/FcaSFaYJVTGt4vh2KqbVPoG3cv+vphh/CNMSrUJnim3SIfTiIS+GJwvqkQdPLfOo",
	"0lwTWV83y3di9qFI5NnYn2MdjnVUqMuNyAJwROQev4R5lkULPJmjnA532hzoieGnqgXR4K/QWZum8Im4",
	"SNCxSbnCggyX1tZvm1QkAM22KROF09mmNhH5s9mmVKgzzq5xyiUeYpzPIq96WEKIZUYasWCrICz5oXV3",
	"z9ZdtJt3/kJu5VLEttVOrjh2blqacVs3ATlq1RBojI+rxAuBIRxR/6TcqV0hoBAwT0Y3yRNv56iTo04F",
	"YC2IU4F/kh++LZ/zk42DnkNVJ52aFM5Lcb9Q9lNVl83uQRTnyicOoqrjZks3USy18xTOU9Tg7F1ZO4uq",
	"qESZ4q1XAU/kIe4nhJayiFmXvBBPeU+IeptihR0jbeVwK0VZ2letIqPHwD6X8eDUlHRSw2tXaWssL9eR",
	"M71e01tXmjLZXlHkdlhGOK/OUR4cFMdAVp6tVjk3O2lpF99PwFjmOEdzdm88NpPlXtb2LwuqaO8Rbq12",
	"YiIULNTnwShj20bZ/eAeOu8FnsG58rXuHZCf/EzZMfwzcAjcwKoqnw1JdqK00XCEXrx2oHQBt/zmlCmw",
	"ROCvM10ulEdq+iikLV4Z6g3bd+V7RRaFJ82XiWeJ1q03uvT7+0iscEKKJZ0pqrdfC7NwZnkTF9uHxfbq",
	"DbkCvYVt37chsRSfr9BXHFdfrpiqEqb76Y5TVx0rvs5hmSwTynOJMhdGc6R0ybQeeMYqyEHx6LwKIY/u",
	"6l055EDfb6qI1NulRV3ktAFB8TWaWaojR4YEVyNprpEc4CYtiyUnNUnlS7/zlEyOM0pXOOmoSrdwMndV",
	"Q9BYywPa1ASVqOw9g8ktVncMc05ZcsXXLvQQnLdEaKSncFVCzk80qoTGeYcRFUM6Z3HsI4Ozrxs6e/+i",
	"+RaDqzByXuYFFUZ3oxyNudqo/pm92ajIdEUhyq8I9kDR1SSZEymsrquhFmlRn9T44uJ/1iYtapXyubly",
	"pQFW2a1Yqpnlobxafi+xuMsJUH5JHOYe7g//BgAA///w0SrSBF8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
